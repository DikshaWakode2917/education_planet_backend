package com.courses.backend.services.Impl;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.courses.backend.entities.Course;
import com.courses.backend.entities.SubCourse;
import com.courses.backend.exceptions.ResourceNotFoundException;
import com.courses.backend.payloads.CourseDto;
import com.courses.backend.payloads.SubCourseDto;
import com.courses.backend.repositories.CourseRepo;
import com.courses.backend.repositories.SubCourseRepo;
import com.courses.backend.services.SubCourseService;

@Service
public  class SubCourseServiceImpl implements SubCourseService {

	@Autowired
	private SubCourseRepo subCourseRepo;
	
	@Autowired
    private CourseRepo courseRepo;
	
	@Override
	public SubCourseDto createSubCourse(SubCourseDto subCourseDto) {
		SubCourse subCourse = this.dtoToSubCourse(subCourseDto);
		SubCourse savedSubCourse = this.subCourseRepo.save(subCourse);
		return this.subCourseToDto(savedSubCourse);
	}
	
	@Override
	public CourseDto addSubCourseToCourse(String courseTitle, SubCourseDto subCourseDto) {
	    Course course = courseRepo.findByCourseTitle(courseTitle);

	    if (course != null) {
	        SubCourse subCourse = dtoToSubCourse(subCourseDto);
	        course.addSubCourse(subCourse);
	        courseRepo.save(course);
	        // Update the CourseDto if needed
	        CourseDto updatedCourseDto = subCourseToDto(course);
	        return updatedCourseDto;
	    } else {
	        throw new ResourceNotFoundException("Course", "title", courseTitle);
	    }
	}

	
	@Override
	public SubCourseDto updateSubCourse(SubCourseDto subCourseDto, String subCourseTitle) {
		SubCourse subCourse = this.dtoToSubCourse(subCourseDto);
		SubCourse updatedSubCourse = this.subCourseRepo.findById(subCourseTitle).orElseThrow((()-> new ResourceNotFoundException("SubCourse","id",subCourseTitle)));
		
		subCourse.setSubCourseTitle(subCourseDto.getSubCourseTitle());
		subCourse.setPosition(subCourseDto.getPosition());
		subCourse.setStatus(subCourseDto.isStatus());
		
		SubCourse updatedSubCoursed = this.subCourseRepo.save(null);
		SubCourseDto subCourseDto1 = this.subCourseToDto(subCourse);
	
		return subCourseDto1;
	}
	
	@Override
	public SubCourseDto getSubCourseById(String subCourseTitle) {
		SubCourse subCourse = this.subCourseRepo.findById(subCourseTitle).orElseThrow((()->new ResourceNotFoundException("SubCourse","Id", subCourseTitle)));
		return this.subCourseToDto(subCourse);
	}
	
	@Override
	public List<SubCourseDto>  getAllSubCourses() {
		List<SubCourse> subCourses = this.subCourseRepo.findAll();
		List<SubCourseDto> subCourseDtos = subCourses.stream().map(subCourse->this.subCourseToDto(subCourse)).collect(Collectors.toList());
		return subCourseDtos;
	}

	@Override
	public boolean deleteSubCourse(String subCourseTitle) {
		SubCourse empty_SubCourse = new SubCourse();
		
		SubCourse subCourse = this.subCourseRepo.findById(subCourseTitle).orElse(empty_SubCourse);
		
		if(subCourse.getSubCourseTitle() == subCourseTitle) {
			this.subCourseRepo.delete(subCourse);
			return true;
		}
		else {
			return false;
		}
	}
	
	private SubCourse dtoToSubCourse(SubCourseDto subCourseDto) {
        SubCourse subCourse = new SubCourse();
        subCourse.setSubCourseTitle(subCourseDto.getSubCourseTitle());
        subCourse.setPosition(subCourseDto.getPosition());
        subCourse.setStatus(subCourseDto.isStatus());
        // You might need to map other properties here
        return subCourse;
    }
	
//	public SubCourse dtoToSubCourse(SubCourseDto subCourseDto) {
//		SubCourse subCourse = new SubCourse();
//		subCourse.setSubCourseTitle(subCourseDto.getSubCourseTitle());
//		subCourse.setPosition(subCourseDto.getPosition());
//		subCourse.setStatus(subCourseDto.isStatus());
//		return subCourse;
//	}
	
	public SubCourseDto subCourseToDto(SubCourse subCourse) {
		SubCourseDto subCourseDto = new SubCourseDto();
		subCourseDto.setSubCourseTitle(subCourse.getSubCourseTitle());
		subCourseDto.setPosition(subCourse.getPosition());
		subCourseDto.setStatus(subCourse.isStatus());
		return subCourseDto;
	}

	}
